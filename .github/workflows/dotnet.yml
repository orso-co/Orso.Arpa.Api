on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
jobs:
  build:
    name: Build, test and analyze
    runs-on: windows-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Setup .NET 7
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: 17
        distribution: 'zulu'
    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v3
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
    - name: Start Sonar Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"orso-co_Orso.Arpa.Api" /o:"orso-co" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
    - name: Clean
      run: dotnet clean ./Orso.Arpa.Api.sln --configuration Release && dotnet nuget locals all --clear
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore --configuration Release
    - name: Run Misc Unit Tests
      run: dotnet test Tests/Orso.Arpa.Misc.Tests/Orso.Arpa.Misc.Tests.csproj --no-build --verbosity normal --configuration Release
    - name: Run Mail Unit Tests
      run: dotnet test Tests/Orso.Arpa.Mail.Tests/Orso.Arpa.Mail.Tests.csproj --no-build --verbosity normal --configuration Release
    - name: Run Infrastructure Unit Tests
      run: dotnet test ./Tests/Orso.Arpa.Infrastructure.Tests/Orso.Arpa.Infrastructure.Tests.csproj --no-build --verbosity normal --configuration Release
    - name: Run Domain Unit Tests
      run: dotnet test ./Tests/Orso.Arpa.Domain.Tests/Orso.Arpa.Domain.Tests.csproj --no-build --verbosity normal --configuration Release
    - name: Run Application Unit Tests
      run: dotnet test ./Tests/Orso.Arpa.Application.Tests/Orso.Arpa.Application.Tests.csproj --no-build --verbosity normal --configuration Release
    - name: Setup Node.js environment
      uses: actions/setup-node@v3
    - name: Install Azurite Emulator
      run: npm install -g azurite
    - name: Run Azurite in Background
      shell: bash
      run: azurite &
    - name: Start PostgreSQL on Windows
      run: |
        $pgService = Get-Service -Name postgresql*
        Set-Service -InputObject $pgService -Status running -StartupType automatic
        Start-Process -FilePath "$env:PGBIN\pg_isready" -Wait -PassThru
    - name: Create integration test user on Windows
      run: |
        & $env:PGBIN\psql --command="CREATE USER integration_test_user WITH SUPERUSER PASSWORD 'integration'" --command="\du"
    - name: Run Api Integration Tests
      run: dotnet test Tests/Orso.Arpa.Api.Tests/Orso.Arpa.Api.Tests.csproj --no-build --verbosity normal --configuration Release
    - name: End Sonar Analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
