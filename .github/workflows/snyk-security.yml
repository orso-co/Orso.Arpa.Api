name: Snyk
on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
jobs:
  snyk:
    name: Build and run snyk analysis
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v5
      - name: Setup .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: 9.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/dotnet@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif --file=./Orso.Arpa.Api.sln --severity-threshold=medium
      - name: Process SARIF file to split multiple runs
        id: process_sarif
        run: |
          if [ -f snyk.sarif ]; then
            echo "SARIF file found, processing..."

            cat > process_sarif.py << 'EOF'
          import json
          import sys
          import os

          try:
              with open('snyk.sarif', 'r') as f:
                  sarif = json.load(f)

              runs = sarif.get('runs', [])
              print(f'Found {len(runs)} runs in SARIF file')

              if len(runs) <= 1:
                  # Single run or no runs - create one file
                  with open('snyk_0.sarif', 'w') as f:
                      json.dump(sarif, f, indent=2)
                  print('file_count=1')
              else:
                  # Multiple runs - create separate SARIF files for each run
                  for i, run in enumerate(runs):
                      # Create a new SARIF structure with only one run
                      single_run_sarif = {
                          '$schema': sarif.get('$schema', 'https://json.schemastore.org/sarif-2.1.0.json'),
                          'version': sarif.get('version', '2.1.0'),
                          'runs': [run]
                      }

                      filename = f'snyk_{i}.sarif'
                      with open(filename, 'w') as f:
                          json.dump(single_run_sarif, f, indent=2)
                      print(f'Created {filename}')

                  print(f'file_count={len(runs)}')

          except Exception as e:
              print(f'Error processing SARIF file: {e}')
              import traceback
              traceback.print_exc()
              # Fallback: create one file with original content
              try:
                  import shutil
                  shutil.copy('snyk.sarif', 'snyk_0.sarif')
                  print('file_count=1')
              except:
                  print('Failed to create fallback file')
                  sys.exit(1)
          EOF

            output=$(python3 process_sarif.py)
            echo "$output"
            file_count=$(echo "$output" | grep "file_count=" | cut -d'=' -f2)
            echo "file_count=$file_count" >> $GITHUB_OUTPUT
          else
            echo "No SARIF file found"
            exit 1
          fi
      - name: Debug SARIF content
        run: |
          echo "=== Original SARIF file analysis ==="
          if [ -f snyk.sarif ]; then
            echo "Original SARIF file size: $(wc -c < snyk.sarif) bytes"
            echo "Number of runs in original: $(jq '.runs | length' snyk.sarif 2>/dev/null || echo 'unknown')"
            echo "Number of results in original: $(jq '[.runs[].results] | add | length' snyk.sarif 2>/dev/null || echo 'unknown')"
            echo "Tool name: $(jq -r '.runs[0].tool.driver.name' snyk.sarif 2>/dev/null || echo 'unknown')"
          fi

          echo "=== Processed SARIF file analysis ==="
          if [ -f snyk_0.sarif ]; then
            echo "Processed SARIF file size: $(wc -c < snyk_0.sarif) bytes"
            echo "Number of runs in processed: $(jq '.runs | length' snyk_0.sarif 2>/dev/null || echo 'unknown')"
            echo "Number of results in processed: $(jq '[.runs[].results] | add | length' snyk_0.sarif 2>/dev/null || echo 'unknown')"
            echo "Tool name: $(jq -r '.runs[0].tool.driver.name' snyk_0.sarif 2>/dev/null || echo 'unknown')"
          fi
      - name: Upload all SARIF files with results
        run: |
          file_count="${{ steps.process_sarif.outputs.file_count }}"
          echo "Checking all $file_count SARIF files for results..."

          uploaded_files=0
          for i in $(seq 0 $((file_count-1))); do
            filename="snyk_${i}.sarif"
            if [ -f "$filename" ]; then
              # Check if this file has any results
              result_count=$(jq '[.runs[].results] | add | length' "$filename" 2>/dev/null || echo '0')
              echo "File $filename has $result_count results"

              if [ "$result_count" -gt 0 ]; then
                echo "Uploading $filename with $result_count results using category snyk-$i"

                # Upload this file since it has results
                curl -L \
                  -X POST \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "https://api.github.com/repos/${{ github.repository }}/code-scanning/sarifs" \
                  -d "{
                    \"commit_sha\": \"${{ github.sha }}\",
                    \"ref\": \"${{ github.ref }}\",
                    \"sarif\": \"$(gzip -c $filename | base64 -w 0)\"
                  }" \
                  && echo "Successfully uploaded $filename" \
                  || echo "Failed to upload $filename"

                uploaded_files=$((uploaded_files + 1))
                sleep 1
              else
                echo "Skipping $filename (no results)"
              fi
            fi
          done

          echo "Uploaded $uploaded_files files with results"
      - name: Verify Code Scanning setup
        run: |
          echo "Checking if Code Scanning is enabled for this repository..."
          gh api "/repos/${{ github.repository }}/code-scanning/alerts" --paginate \
            && echo "Code Scanning is properly configured" \
            || echo "Code Scanning may not be enabled or no alerts exist yet"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
