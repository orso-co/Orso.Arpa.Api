{
    "Logging": {
        "LogLevel": {
            "Default": "Trace",
            "Microsoft": "Warning",
            "Microsoft.Hosting.Lifetime": "Information"
        },
        "NLog": {
            "IncludeScopes": true,
            "RemoveLoggerFactoryFilter": true
        }
    },
    "NLog": {
        "autoReload": true,
        "throwConfigExceptions": true,
        "internalLogLevel": "Info",
        "internalLogFile": "${basedir}/internal-nlog.txt",
        "extensions": [
            { "assembly": "NLog.Extensions.Logging" },
            { "assembly": "NLog.Web.AspNetCore" },
            { "assembly": "NTRPRS.NLog.Slack" }
        ],
        "default-wrapper": {
            "type": "AsyncWrapper",
            "overflowAction": "Block"
        },
        "variables": {
            "slackWebHookUrl": "https://hooks.slack.com/services/dummywebhookurl",
            "slackChannel": "#dummychannel",
            "slackUsername": "see azure config"
        },
        "targets": {
            "async": true,
            "slackErrorTarget": {
                "type": "Slack",
                "layout": "${message}\nuser: ${aspnet-user-claim:name} (IP ${aspnet-request-ip})\nbrowser: ${aspnet-request-useragent}\n\nrequest: ${aspnet-request-method} ${aspnet-request-url:IncludeHost=false:IncludePort=false:IncludeQueryString=true:IncludeScheme=false}\n\nrequest body: ${aspnet-request-posted-body-shadowed}\n\n",
                "webHookUrl": "${slackWebHookUrl}",
                "channel": "${slackChannel}",
                "excludeLevel": false,
                "embed": true,
                "username": "${slackUsername}",
                "icon": ":rotating_light:"
            },
            "slackInfoTarget": {
                "type": "Slack",
                "layout": "${message}\nuser: ${aspnet-user-claim:name} (IP ${aspnet-request-ip})\n\n",
                "webHookUrl": "${slackWebHookUrl}",
                "channel": "${slackChannel}",
                "excludeLevel": false,
                "embed": true,
                "username": "${slackUsername}",
                "icon": ":information:"
            }
        },
        "rules": {
            "01_SkipNonCriticalMicrosoftLogs": {
                "logger": "Microsoft.*",
                "maxLevel": "Info",
                "final": true
            },
            "02_SkipNonCriticalSystemNetHttpLogs": {
                "logger": "System.Net.Http.*",
                "maxLevel": "Info",
                "final": true
            },
            "03_SlackInfoLog": {
                "logger": "*.CleanUpProjectParticipationStatusOfParentProjects",
                "level": "Info",
                "writeTo": "slackInfoTarget"
            },
            "04_SlackErrorLog": {
                "logger": "*",
                "minLevel": "Error",
                "writeTo": "slackErrorTarget"
            }
        }
    },
    "AllowedHosts": "*",
    "ConnectionStrings": {
        "PostgreSQLConnection": "see azure config"
    },
    "EmailConfiguration": {
        "From": "see azure config",
        "SmtpServer": "see azure config",
        "Port": 465,
        "Username": "see azure config",
        "Password": "see azure config",
        "DefaultSubject": "Message from ARPA"
    },
    "JwtConfiguration": {
        "TokenKey": "see azure config",
        "Issuer": "https://orso-arpa.azurewebsites.net",
        "Audience": "https://orso-arpa.azurewebsites.net",
        "AccessTokenExpiryInMinutes": 10,
        "RefreshTokenExpiryInDays": 7
    },
    "IdentityConfiguration": {
        "LockoutExpiryInMinutes": 10,
        "MaxFailedLoginAttempts": 3,
        "EmailConfirmationTokenExpiryInDays": 3,
        "DataProtectionTokenExpiryInHours": 2
    },
    "CorsConfiguration": {
        "AllowedOrigins": []
    },
    "ClubConfiguration": {
        "Name": "ORSO â€“ Orchestra & Choral Society Freiburg | Berlin e. V.",
        "Address": "Schwarzwaldstr. 9-11, 79117 Freiburg",
        "ContactEmail": "mail@orso.co",
        "InternalEmail": "see azure config",
        "Phone": "+4907617073203"
    },
    "SeedConfiguration": {
        "SeedInitialAdmin": false,
        "InitialAdmin": {
            "UserName": "see azure config",
            "Email": "see azure config",
            "Password": "see azure config",
            "GivenName": "see azure config",
            "Surname": "see azure config",
            "GenderId": "see azure config"
        }
    },
    "IpRateLimiting": {
        "EnableEndpointRateLimiting": true,
        "StackBlockedRequests": true,
        "EndpointWhitelist": [ "options:*", "post:/graphql" ],
        "HttpStatusCode": 429,
        "GeneralRules": [
            {
                "Endpoint": "((post)|(put)|(delete)):*",
                "Period": "1s",
                "Limit": 1
            },
            {
                "Endpoint": "get:*",
                "Period": "1s",
                "Limit": 10
            },
            {
                "Endpoint": "*",
                "Period": "15m",
                "Limit": 100
            },
            {
                "Endpoint": "*",
                "Period": "12h",
                "Limit": 1000
            },
            {
                "Endpoint": "*",
                "Period": "7d",
                "Limit": 10000
            }
        ]
    },
    "IpRateLimitPolicies": {
        "IpRules": []
    }
}
